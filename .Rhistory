pi
A <- 273 # K
B <- 0.001 # K/km
C <- 1 # K
L <- 1000 # km
k <- 2*pi/L
x <- seq(0,1000,1)
y <- seq(-3,3,0.1)
length(y)
a<-matrix(x,length(y),length(x))
View(a)
View(a)
a<-matrix(x,length(x),length(y))
View(a)
View(a)
a<-t(matrix(x,length(x),length(y)))
View(a)
View(a)
a[50:55,990:1000]
xmat <- t(matrix(x,length(x),length(y)))
ymat <- matrix(y,length(y),length(x))
zmat <- A + B*ymat + C*sin(k*xmat)
View(zmat)
View(zmat)
persp(x, y, zmat, phi = 45, theta = 45,
xlab = "X Coordinate (feet)", ylab = "Y Coordinate (feet)",
main = "Surface elevation data"
)
persp(y, x, zmat, phi = 45, theta = 45,
xlab = "X Coordinate (feet)", ylab = "Y Coordinate (feet)",
main = "Surface elevation data"
)
A <- 273 # K
B <- 0.001 # K/km
C <- 1 # K
L <- 1000 # km
k <- 2*pi/L
x <- seq(0,1000,10)
y <- seq(-3,3,0.1)
xmat <- t(matrix(x,length(x),length(y)))
ymat <- matrix(y,length(y),length(x))
zmat <- A + B*ymat + C*sin(k*xmat)
persp(y, x, zmat, phi = 45, theta = 45,
xlab = "X Coordinate (feet)", ylab = "Y Coordinate (feet)",
main = "Surface elevation data"
)
A <- 273 # K
B <- 0.001 # K/km
C <- 1 # K
L <- 1000 # km
k <- 2*pi/L
x <- seq(0,1000,10)
y <- seq(-3,3,0.1)
xmat <- t(matrix(x,length(x),length(y)))
ymat <- matrix(y,length(y),length(x))
zmat <- A + B*ymat + C*sin(k*xmat)
persp(x, y, t(zmat), phi = 45, theta = 45,
xlab = "X Coordinate (feet)", ylab = "Y Coordinate (feet)",
main = "Surface elevation data"
)
A <- 273 # K
B <- 0.001 # K/km
C <- 1 # K
L <- 1000 # km
k <- 2*pi/L
x <- seq(0,1000,10)
y <- seq(-3,3,0.1)
xmat <- t(matrix(x,length(x),length(y)))
ymat <- matrix(y,length(y),length(x))
zmat <- A + B*ymat + C*sin(k*xmat)
persp(x, y, t(zmat), phi = 45, theta = 45,
xlab = "X Coordinate (km)", ylab = "Y Coordinate (km)",
main = "Temperature"
)
A <- 273 # K
B <- 0.001 # K/km
C <- 1 # K
L <- 1000 # km
k <- 2*pi/L
x <- seq(0,1000,10)
y <- seq(-500,500,10)
xmat <- t(matrix(x,length(x),length(y)))
ymat <- matrix(y,length(y),length(x))
zmat <- A + B*ymat + C*sin(k*xmat)
persp(x, y, t(zmat), phi = 45, theta = 45,
xlab = "X Coordinate (km)", ylab = "Y Coordinate (km)",
main = "Temperature"
)
1/0.001
A <- 273 # K
B <- 0.001 # K/km
C <- 1 # K
L <- 1000 # km
k <- 2*pi/L
x <- seq(0,1000,10)
y <- seq(-1000,1000,10)
xmat <- t(matrix(x,length(x),length(y)))
ymat <- matrix(y,length(y),length(x))
zmat <- A + B*ymat + C*sin(k*xmat)
persp(x, y, t(zmat), phi = 45, theta = 45,
xlab = "X Coordinate (km)", ylab = "Y Coordinate (km)",
main = "Temperature"
)
y <- seq(-1000,1000,20)
A <- 273 # K
B <- 0.001 # K/km
C <- 1 # K
L <- 1000 # km
k <- 2*pi/L
x <- seq(0,1000,10)
y <- seq(-1000,1000,20)
xmat <- t(matrix(x,length(x),length(y)))
ymat <- matrix(y,length(y),length(x))
zmat <- A + B*ymat + C*sin(k*xmat)
persp(x, y, t(zmat), phi = 45, theta = 45,
xlab = "X Coordinate (km)", ylab = "Y Coordinate (km)",
main = "Temperature"
)
View(zmat)
View(zmat)
A <- 273 # K
B <- 0.001 # K/km
C <- 1 # K
L <- 1000 # km
k <- 2*pi/L
x <- seq(0,1000,20)
y <- seq(-1000,2000,60)
xmat <- t(matrix(x,length(x),length(y)))
ymat <- matrix(y,length(y),length(x))
zmat <- A + B*ymat + C*sin(k*xmat)
persp(x, y, t(zmat), phi = 45, theta = 45,
xlab = "X Coordinate (km)", ylab = "Y Coordinate (km)",
main = "Temperature"
)
k
z <- c(1500,3000,5000,7000,9000,11000)
dz <- c(1500,1500,2000,2000,2000,2000)
diver <- c(-2,-1.2,-0.3,0.4,2.5,0.5)*1e-5
dw <- dz*diver
w <- cumsum(dw)
plot(w,z)
z <- c(1500,3000,5000,7000,9000,11000)
dz <- c(1500,1500,2000,2000,2000,2000)
diver <- c(-2,-1.2,-0.3,0.4,2.5,0.5)*1e-5
dw <- dz*diver
w <- cumsum(dw)
plot(w,z)
z <- c(1500,3000,5000,7000,9000,11000)
dz <- c(1500,1500,2000,2000,2000,2000)
diver <- c(-2,-1.2,-0.3,0.4,2.5,0.5)*1e-5
dw <- -dz*diver
w <- cumsum(dw)
plot(w,z)
w[6]
0.014/2000/1e-5
z <- c(1500,3000,5000,7000,9000,11000)
dz <- c(1500,1500,2000,2000,2000,2000)
diver <- c(-2,-1.2,-0.3,0.4,0.7,0.5)*1e-5
dw <- -dz*diver
w <- cumsum(dw)
plot(w,z)
w[6]
0.014/2000/1e-5
z <- c(1500,3000,5000,7000,9000,11000)
dz <- c(1500,1500,2000,2000,2000,2000)
diver <- c(-2,-1.2,-0.3,0.4,1.8,0.5)*1e-5
dw <- -dz*diver
w <- cumsum(dw)
plot(w,z)
z <- c(1500,3000,5000,7000,9000,11000)
dz <- c(1500,1500,2000,2000,2000,2000)
diver <- c(-2,-1.2,-0.3,0.4,1.8,0.5)*1e-5
dw <- -dz*diver
w <- cumsum(dw)
plot(w,z,w,dw)
z <- c(1500,3000,5000,7000,9000,11000)
dz <- c(1500,1500,2000,2000,2000,2000)
diver <- c(-2,-1.2,-0.3,0.4,1.8,0.5)*1e-5
dw <- -dz*diver
w <- cumsum(dw)
plot(w,z)
w[6]
A <- 1000 # K
B <- 0.02 # K/km
C <- 10 # K
L <- 1000 # km
k <- 2*pi/L
x <- seq(-1000,1000,40)
y <- seq(-1000,1000,40)
xmat <- t(matrix(x,length(x),length(y)))
ymat <- matrix(y,length(y),length(x))
zmat <- A + B*ymat + C*sin(k*xmat)
persp(x, y, t(zmat), phi = 45, theta = 45,
xlab = "X Coordinate (km)", ylab = "Y Coordinate (km)",
main = "pressure"
)
d1=read.table("./student/student-mat.csv",sep=";",header=TRUE)
setwd("/Users/otsopera/Documents/IODS/IODS-project/data")
rm(list = ls())
library(dplyr) # for data wrangling
install.packages('dplyr')
rm(list = ls())
library(dplyr) # for data wrangling
d1=read.table("./student/student-mat.csv",sep=";",header=TRUE)
d2=read.table("./student/student-por.csv",sep=";",header=TRUE)
alc=merge(d1,d2,by=c("school","sex","age","address","famsize","Pstatus","Medu","Fedu","Mjob","Fjob","reason","nursery","internet"))
print(nrow(d3)) # 382 students
print(nrow(alc)) # 382 students
glimpse(alc)
str(alc)
setwd("/Users/otsopera/Documents/IODS/IODS-project/data")
rm(list = ls())
d1=read.table("./student/student-mat.csv",sep=";",header=TRUE)
d2=read.table("./student/student-por.csv",sep=";",header=TRUE)
alc=merge(d1,d2,by=c("school","sex","age","address","famsize","Pstatus","Medu","Fedu","Mjob","Fjob","reason","nursery","internet"),suffix = c('.math','.por'))
print(nrow(alc)) # 382 students
str(alc)
rm(list = c('d1','d2'))
dim(alc)
rm(list = ls())
d1=read.table("./student/student-mat.csv",sep=";",header=TRUE)
d2=read.table("./student/student-por.csv",sep=";",header=TRUE)
alc_raw=merge(d1,d2,by=c("school","sex","age","address","famsize","Pstatus","Medu","Fedu","Mjob","Fjob","reason","nursery","internet"),suffix = c('.math','.por'))
rm(list = c('d1','d2')) # clear the individual variables from memory
print(nrow(alc)) # 382 students
str(alc) # 53 variables
print(nrow(alc_raw)) # 382 students
str(alc_raw) # 53 variables
dim(alc_raw)
alc <- select(math_por, one_of(join_by))
join_by <- c("school","sex","age","address","famsize","Pstatus","Medu","Fedu","Mjob","Fjob","reason","nursery","internet")
d1=read.table("./student/student-mat.csv",sep=";",header=TRUE)
d2=read.table("./student/student-por.csv",sep=";",header=TRUE)
join_by <- c("school","sex","age","address","famsize","Pstatus","Medu","Fedu","Mjob","Fjob","reason","nursery","internet")
alc_raw=merge(d1,d2,by=join_by,suffix = c('.math','.por'))
print(nrow(alc_raw)) # 382 students
str(alc_raw) # 53 variables
dim(alc_raw)
alc <- select(d1, one_of(join_by))
rm(list = c('d1','d2')) # clear the individual variables from memory
notjoined_columns <- colnames(math)[!colnames(math) %in% join_by]
setwd("/Users/otsopera/Documents/IODS/IODS-project/data")
rm(list = ls())
math=read.table("./student/student-mat.csv",sep=";",header=TRUE)
por=read.table("./student/student-por.csv",sep=";",header=TRUE)
join_by <- c("school","sex","age","address","famsize","Pstatus","Medu","Fedu","Mjob","Fjob","reason","nursery","internet")
alc_raw=merge(math,por,by=join_by,suffix = c('.math','.por'))
print(nrow(alc_raw)) # 382 students
str(alc_raw) # 53 variables
dim(alc_raw)
alc <- select(math, one_of(join_by))
notjoined_columns <- colnames(math)[!colnames(math) %in% join_by]
notjoined_columns
for(column_name in notjoined_columns) {
# select two columns from 'math_por' with the same original name
two_columns <- select(math_por, starts_with(column_name))
# select the first column vector of those two columns
first_column <- select(two_columns, 1)[[1]]
# if that first column vector is numeric...
if(is.numeric(first_column)) {
# take a rounded average of each row of the two columns and
# add the resulting vector to the alc data frame
alc[column_name] <- round(rowMeans(two_columns))
} else { # else if it's not numeric...
# add the first column vector to the alc data frame
alc[column_name] <- select(two_columns, 1)[[1]]
}
}
math_por=merge(math,por,by=join_by,suffix = c('.math','.por'))
print(nrow(math_por)) # 382 students
str(math_por) # 53 variables
dim(math_por)
alc <- select(math, one_of(join_by))
notjoined_columns <- colnames(math)[!colnames(math) %in% join_by]
notjoined_columns
for(column_name in notjoined_columns) {
# select two columns from 'math_por' with the same original name
two_columns <- select(math_por, starts_with(column_name))
# select the first column vector of those two columns
first_column <- select(two_columns, 1)[[1]]
# if that first column vector is numeric...
if(is.numeric(first_column)) {
# take a rounded average of each row of the two columns and
# add the resulting vector to the alc data frame
alc[column_name] <- round(rowMeans(two_columns))
} else { # else if it's not numeric...
# add the first column vector to the alc data frame
alc[column_name] <- select(two_columns, 1)[[1]]
}
}
two_columns <- select(math_por, starts_with(column_name))
first_column <- select(two_columns, 1)[[1]]
if(is.numeric(first_column)) {
# take a rounded average of each row of the two columns and
# add the resulting vector to the alc data frame
alc[column_name] <- round(rowMeans(two_columns))
} else { # else if it's not numeric...
# add the first column vector to the alc data frame
alc[column_name] <- select(two_columns, 1)[[1]]
}
is.numeric(first_column)
alc[column_name] <- select(two_columns, 1)[[1]]
alc <- select(math_por, one_of(join_by))
notjoined_columns <- colnames(math)[!colnames(math) %in% join_by]
notjoined_columns
for(column_name in notjoined_columns) {
# select two columns from 'math_por' with the same original name
two_columns <- select(math_por, starts_with(column_name))
# select the first column vector of those two columns
first_column <- select(two_columns, 1)[[1]]
# if that first column vector is numeric...
if(is.numeric(first_column)) {
# take a rounded average of each row of the two columns and
# add the resulting vector to the alc data frame
alc[column_name] <- round(rowMeans(two_columns))
} else { # else if it's not numeric...
# add the first column vector to the alc data frame
alc[column_name] <- select(two_columns, 1)[[1]]
}
}
setwd("/Users/otsopera/Documents/IODS/IODS-project/data")
rm(list = ls())
math=read.table("./student/student-mat.csv",sep=";",header=TRUE)
por=read.table("./student/student-por.csv",sep=";",header=TRUE)
join_by <- c("school","sex","age","address","famsize","Pstatus","Medu","Fedu","Mjob","Fjob","reason","nursery","internet")
math_por=merge(math,por,by=join_by,suffix = c('.math','.por'))
print(nrow(math_por)) # 382 students
str(math_por) # 53 variables
dim(math_por)
alc <- select(math_por, one_of(join_by))
notjoined_columns <- colnames(math)[!colnames(math) %in% join_by]
notjoined_columns
for(column_name in notjoined_columns) {
# select two columns from 'math_por' with the same original name
two_columns <- select(math_por, starts_with(column_name))
# select the first column vector of those two columns
first_column <- select(two_columns, 1)[[1]]
# if that first column vector is numeric...
if(is.numeric(first_column)) {
# take a rounded average of each row of the two columns and
# add the resulting vector to the alc data frame
alc[column_name] <- round(rowMeans(two_columns))
} else { # else if it's not numeric...
# add the first column vector to the alc data frame
alc[column_name] <- select(two_columns, 1)[[1]]
}
}
rm(list = c('math','por')) # clear the individual variables from memory
rm(list = c('math','por','two_columns','math_por')) # clear the individual variables from memory
glimpse(alc)
alc <- mutate(alc, alc_use = (Dalc + Walc) / 2)
alc <- mutate(alc, high_use = alc_use > 2)
glimpse(alc)
write.table(alc, file = "alc_students.txt", row.names = F)
head(read.table("alc_students.txt"))
lrn14_analysis <- read.table("./data/students/alc_students.txt",header = T,  dec = ".")
setwd("/Users/otsopera/Documents/IODS/IODS-project/")
lrn14_analysis <- read.table("./data/students/alc_students.txt",header = T,  dec = ".")
lrn14_analysis <- read.table("./data/student/alc_students.txt",header = T,  dec = ".")
lrn14_analysis <- read.table("./data/alc_students.txt",header = T,  dec = ".")
rm(list = ls())
alc <- read.table("./data/alc_students.txt",header = T,  dec = ".")
print(colnames(alc))
(lrn14_analysis)
summary(alc)
library(ggplot2)
install.packages("ggplot2")
g1 <- ggplot(data = alc, aes(x = alc_use, fill = sex))
library(ggplot2)
g1 <- ggplot(data = alc, aes(x = alc_use, fill = sex))
g1 + geom_bar()
g1 + geom_bar()
g1 <- ggplot(data = alc, aes(x = alc_use, fill = sex))
g1 + geom_bar()
g1 + geom_bar()
g1 <- ggplot(data = alc, aes(x = sex, y = high_use, fill = sex))
g1 + geom_bar()
g1 + histogram()
g1 + hist()
g1 + boxplot()
g1 <- ggplot(data = alc, aes(x = sex, y = high_use, fill = sex))
g1 + boxplot()
g1 + geom_boxplot()
g1 + geom_boxplot()
g1 <- ggplot(data = alc, aes(x = sex, fill = sex))
g1 + geom_boxplot()
high_use
g1 <- ggplot(data = alc, aes(x = sex, y = high_use, fill = sex))
g1 + geom_bar()
g1 <- ggplot(data = alc, aes(x = high_use, fill = sex))
g1 + geom_bar()
g1 + geom_bar()
g1 <- ggplot(data = alc, aes(x = sex, fill = high_use))
g1 + geom_bar()
g2 <- ggplot(data = alc, aes(x = failures, fill = high_use))
g2 + plot()
g2 <- ggplot(data = alc, aes(x = failures, y = high_use))
g2 + plot()
g2 + geom_point()
g2 <- ggplot(data = alc, aes(y = failures, x = high_use))
g2 + geom_boxplot()
g2 <- ggplot(data = alc, aes(x = failures, fill = high_use))
g2 + geom_bar()
g2 + geom_bar(stat = "identity")
g2 <- ggplot(data = alc, aes(x = failures, fill = high_use))
g2 <- ggplot(data = alc, aes(y = failures, x = high_use))
g2 + geom_boxplot()
summary(alc)
print(colnames(alc))
g2 <- ggplot(data = alc, aes(y = famrel, x = high_use))
g2 <- ggplot(data = alc, aes(y = famrel))
g2 + geom_histogram()
g2 <- ggplot(data = alc, aes(x = famrel))
g2 + geom_histogram()
g2 <- ggplot(data = alc, aes(x = famrel, binwidth = 1)
# define the plot as a bar plot and draw it
g2 + geom_histogram()
g2 <- ggplot(data = alc, aes(x = famrel, binwidth = 1)
# define the plot as a bar plot and draw it
g2 + geom_histogram()
g2 <- ggplot(data = alc, aes(x = famrel, binwidth = 1))
g2 + geom_histogram()
g2 + geom_histogram(binwidth = 1)
g2 + geom_histogram(binwidth = 1)
g2 <- ggplot(data = alc, aes(x = famrel))
g2 + geom_histogram(binwidth = 1)
g2 + geom_histogram(binwidth = 1) + xlab("Quality of family relationships")
g1 <- ggplot(data = alc, aes(x = famrel, fill = high_use))
g3 <- ggplot(data = alc, aes(x = famrel, fill = high_use))
g3 + geom_bar()
g3 <- ggplot(alc, aes(x = high_use, y = famrel, col = sex))
g3 + geom_boxplot() + ylab("absences") + ggtitle("Student absences by alcohol consumption and sex")
g3 <- ggplot(alc, aes(x = high_use, y = famrel))
g3 + geom_boxplot() + ylab("absences") + ggtitle("Student absences by alcohol consumption and sex")
g3 + geom_boxplot() + ylab("absences") + ggtitle("Student absences by alcohol consumption and sex")
g2 + geom_histogram(binwidth = 1) + xlab("Quality of family relationships")
g4 <- ggplot(data = alc, aes(x = romantic, fill = high_use))
g4 + geom_bar()
g4 + geom_bar()
g1 + geom_bar() + xlab("Sex")
g1 + geom_bar() + xlab("Sex")
g5 <- ggplot(data = alc, aes(x = absences))
# define the plot as a bar plot and draw it
g5 + geom_histogram(binwidth = 1) + xlab("Number of school absences")
g5 + geom_histogram(binwidth = 1) + xlab("Number of school absences")
g6 <- ggplot(alc, aes(x = high_use, y = absences))
# define the plot as a boxplot and draw it
g6 + geom_boxplot() + ylab("Number of school absences")
g6 + geom_boxplot() + ylab("Number of school absences")
m <- glm(high_use ~ famrel + romantic + absences + sex, data = alc, family = "binomial")
summary(m)
coef(m)
m <- glm(high_use ~ famrel  + absences + sex, data = alc, family = "binomial")
summary(m)
coef(m)
OR <- coef(m) %>% exp
CI <- confint(m) %>% exp
cbind(OR, CI)
OR <- exp(coef(m))
CI <- exp(confint(m))
cbind(OR, CI)
probabilities <- predict(m, type = "response")
alc <- mutate(alc, probability = probabilities)
alc <- mutate(alc, prediction = probability > 0.5)
table(high_use = alc$high_use, prediction = alc$prediction)
2^5
2^7
2^8
a = table(high_use = alc$high_use, prediction = alc$prediction)
a[1,2]
a = table(high_use = alc$high_use, prediction = alc$prediction)
a = table(high_use = alc$high_use, prediction = alc$prediction)
a = table(high_use = alc$high_use, prediction = alc$prediction)
a
sum(a)
a[1,1]/a[2,2]
round((a[2,1] + a[2,2])/sum(a)*100)
install.packages("GGally")
